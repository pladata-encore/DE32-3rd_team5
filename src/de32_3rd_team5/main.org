from fastapi import FastAPI, Query
import os

app = FastAPI()

# 주소 데이터를 포함하는 파일 경로
file_path = "/home/hun/data/add_data"

#@app.get("/address")
#def read_add():
#    file_path = "/home/hun/code/data"
#
#    with open(file_path, "rb") as f:
#    file_data = f.read()

#@app.get("/address")
#def read_add():
#    if os.path.exists(file_path):
#        print("파일이 존재합니다.")
#        with open(file_path, "r", encoding="utf-8") as f:
#            print(f.read())
#    else:
#        print("파일을 찾을 수 없습니다.")


@app.get("/address")
def read_file(location: str = Query(..., description="검색할 지역명을 입력하세요")):
    # 파일 경로 출력
    print(f"파일 경로: {file_path}")
    
    # 파일 경로 확인
    if not os.path.exists(file_path):
        return {"error": f"파일을 찾을 수 없습니다: {file_path}"}

    matching_lines = []

#    # 파일 읽기
#    with open(file_path, "r", encoding="utf-8") as f:
#        for line in f:
#            if location in line:
#                matching_lines.append(line.strip())  # 지역명이 포함된 행 저장
#
#    if not matching_lines:
#        return {"message": f"'{location}'을 포함하는 데이터가 없습니다."}
#
#    return {"matching_lines": matching_lines}
#
#def

    # 파일 읽기
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            if location in line:  # 상위 지역명 필터
                # 세부 지역명이 입력되었을 경우 추가 필터링
                if sub_location:
                    if sub_location in line:
                        matching_lines.append(line.strip())
                else:
                    matching_lines.append(line.strip())

    if not matching_lines:
        return {"message": f"'{location}' 및 '{sub_location}'을 포함하는 데이터가 없습니다."}

    return {"matching_lines": matching_lines}
