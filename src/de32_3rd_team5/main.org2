from fastapi import FastAPI, Query
import os

app = FastAPI()

# 주소 데이터를 포함하는 파일 경로
file_path = "/home/hun/data/add_data"

# 경상남도를 입력하면 해당 시/구 정보를 반환하는 함수
def get_city_and_district(location: str):
    if not os.path.exists(file_path):
        return {"error": f"파일을 찾을 수 없습니다: {file_path}"}

    matching_lines = []

    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            if location in line:
                # 시와 구 정보만 추출
                city_district = line.strip().split(",")[1:]  # 시와 구 정보만
                matching_lines.append(", ".join(city_district))

    if not matching_lines:
        return {"message": f"'{location}'에 대한 시/구 정보를 찾을 수 없습니다."}

    return matching_lines

# 시를 입력하면 해당 구 정보를 반환하는 함수
def get_district_from_city(location: str, sub_location: str):
    if not os.path.exists(file_path):
        return {"error": f"파일을 찾을 수 없습니다: {file_path}"}

    matching_districts = []

    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            if location in line and sub_location in line:
                district = line.strip().split(",")[2]  # 구 정보만
                matching_districts.append(district)

    if not matching_districts:
        return {"message": f"'{sub_location}'에 대한 구 정보를 찾을 수 없습니다."}

    return matching_districts


@app.get("/location")
def get_location(location: str = Query(..., description="검색할 지역명을 입력하세요")):
    result = get_city_and_district(location)
    return {"matching_cities": result}


@app.get("/sub_location")
def get_sub_location(location: str = Query(..., description="상위 지역명을 입력하세요"), sub_location: str = Query(..., description="세부 시명을 입력하세요")):
    result = get_district_from_city(location, sub_location)
    return {"matching_districts": result}

